openapi: 3.0.0
info:
  title: User Management API
  description: API for user management, including signup and login functionality.
  version: 1.0.0

paths:
  /api/signup:
    post:
      summary: User Signup
      description: Creates a new user account with the provided signup data.
      operationId: signupUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: new_user
                password:
                  type: string
                  example: strong_password
                email:
                  type: string
                  example: user@example.com
                phone:
                  type: string
                  example: "+1234567890"
                user_type:
                  type: string
                  example: "owner"
              required:
                - username
                - password
                - email
                - phone
                - user_type
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully."
                  user_id:
                    type: string
                    example: "new_user_id"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data."

  /api/user/login:
    post:
      summary: User Login
      description: Authenticates a user and generates a token.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: user_password
                userType:
                  type: string
                  example: "diner"
              required:
                - username
                - password
                - userType
      responses:
        '201':
          description: Login successful and token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token generated successfully."
                  token:
                    type: string
                    example: "your_jwt_token"
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username or password."

  /api/user/get_data:
    get:
      summary: Get User Data
      description: Retrieves user data for an authenticated user.
      operationId: getUserData
      security:
        - jwt_token: []  # Assuming you have JWT security defined
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "user@example.com"
                      phone_number:
                        type: string
                        example: "+1234567890"
                      full_name:
                        type: string
                        example: "John Doe"
                      profile_image_link:
                        type: string
                        example: "http://example.com/image.jpg"
                      address:
                        type: string
                        example: "123 Main St"
                      favorite_restaurants:
                        type: array
                        items:
                          type: string
                          example: "Pizza Place"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials."
                  

  /api/user/get_authentication:
    get:
      summary: Get User Authentication
      description: Retrieves authentication details for the authenticated user.
      operationId: getUserAuthentication
      security:
        - jwt_token: []  # Ensure user is authenticated
      responses:
        '200':
          description: Authentication details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get authentication successfully"
                  auth:
                    type: object
                    properties:
                      # Define properties of the auth object as needed
                      username:
                        type: string
                        example: "user1"
                      user_id:
                        type: string
                        example: "user_id"
                      

        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials."

  /api/user/update_data:
    patch:
      summary: Update User Data
      description: Updates user information like name and email.
      operationId: updateUserData
      security:
        - jwt_token: []  # Ensure user is authenticated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  type: string
                  enum: [diner, owner]  # Example user types
                  example: "diner"
                # Add other properties as needed (e.g., name, email)
                fullName:
                  type: string
                  example: new_user
                profileImageLink:
                  type: string
                  example: ssss
                email:
                  type: string
                  example: user@example.com
                phoneNumber:
                  type: string
                  example: "+1234567890"
              required:
                - userType
                - fullName
                - profileImageLink
                - email
                - phoneNumber
      responses:
        '200':
          description: User data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User data updated successfully"
        '401':
          description: Invalid user types
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid user types"

  /api/user/update_auth:
    patch:
      summary: Update User Authentication
      description: Updates user authentication details like username and password.
      operationId: updateUserAuthentication
      security:
        - jwt_token: []  # Ensure user is authenticated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  type: string
                  enum: [diner, owner]  # Example user types
                  example: "diner"
                # Add other properties as needed (e.g., new username, new password)
                username:
                  type: string
                  example: new_user
                password:
                  type: string
                  example: pasworkd
                authenticationType:
                  type: string
                  enum: [base, google]  # Example user types
                  example: "base"
                authenticationIdentifier:
                  type: string
                  example: "21123131"
              required:
                - userType
                - username
                - password
                - authenticationType
                - authenticationIdentifier
      responses:
        '200':
          description: User authentication updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User authentication updated successfully"
        '401':
          description: Invalid user types
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid user types"

  /api/user/get_users:
    get:
      summary: Get All Users
      description: Retrieves a list of all users data., including diners and owner
      operationId: getAllUsers
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    # Define properties of the user object as needed
                    fullname:
                      type: string
                      example: "user1"
                    email:
                      type: string
                      example: "user@example.com"
                    phone_number:
                      type: string
                      example: "012345678"
                    profile_image_link:
                      type: string
                      example: "something/something.png"

components:
  securitySchemes:
    jwt_token:
      type: http
      scheme: bearer
      bearerFormat: JWT